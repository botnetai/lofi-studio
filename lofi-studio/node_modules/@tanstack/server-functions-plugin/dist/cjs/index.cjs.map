{"version":3,"file":"index.cjs","sources":["../../src/index.ts"],"sourcesContent":["import {\n  TanStackDirectiveFunctionsPlugin,\n  TanStackDirectiveFunctionsPluginEnv,\n} from '@tanstack/directive-functions-plugin'\nimport type { Plugin, ViteDevServer } from 'vite'\nimport type {\n  DirectiveFn,\n  ReplacerFn,\n} from '@tanstack/directive-functions-plugin'\n\nexport type CreateRpcFn = (\n  functionId: string,\n  serverBase: string,\n  splitImportFn?: string,\n) => any\n\nexport type ServerFnPluginOpts = {\n  /**\n   * The virtual import ID that will be used to import the server function manifest.\n   * This virtual import ID will be used in the server build to import the manifest\n   * and its modules.\n   */\n  manifestVirtualImportId: string\n  client: ServerFnPluginEnvOpts\n  ssr: ServerFnPluginEnvOpts\n  server: ServerFnPluginEnvOpts\n}\n\nexport type ServerFnPluginEnvOpts = {\n  getRuntimeCode: () => string\n  replacer: ReplacerFn\n}\n\nexport function createTanStackServerFnPlugin(opts: ServerFnPluginOpts): {\n  client: Array<Plugin>\n  ssr: Array<Plugin>\n  server: Array<Plugin>\n} {\n  const directiveFnsById: Record<string, DirectiveFn> = {}\n  let viteDevServer: ViteDevServer | undefined\n\n  const onDirectiveFnsById = (d: Record<string, DirectiveFn>) => {\n    // When directives are compiled, save them to our global variable\n    // This variable will be used both during development to incrementally\n    // look up server functions and during build/production to produce a\n    // static manifest that can be read by the server build\n    Object.assign(directiveFnsById, d)\n    invalidateVirtualModule(\n      viteDevServer,\n      resolveViteId(opts.manifestVirtualImportId),\n    )\n  }\n\n  const directive = 'use server'\n  const directiveLabel = 'Server Function'\n\n  return {\n    client: [\n      // The client plugin is used to compile the client directives\n      // and save them so we can create a manifest\n      TanStackDirectiveFunctionsPlugin({\n        envLabel: 'Client',\n        directive,\n        directiveLabel,\n        getRuntimeCode: opts.client.getRuntimeCode,\n        replacer: opts.client.replacer,\n        onDirectiveFnsById,\n      }),\n    ],\n    ssr: [\n      // The SSR plugin is used to compile the server directives\n      TanStackDirectiveFunctionsPlugin({\n        envLabel: 'SSR',\n        directive,\n        directiveLabel,\n        getRuntimeCode: opts.ssr.getRuntimeCode,\n        replacer: opts.ssr.replacer,\n        onDirectiveFnsById,\n      }),\n    ],\n    server: [\n      {\n        // On the server, we need to be able to read the server-function manifest from the client build.\n        // This is likely used in the handler for server functions, so we can find the server function\n        // by its ID, import it, and call it.\n        name: 'tanstack-start-server-fn-vite-plugin-manifest-server',\n        enforce: 'pre',\n        configureServer(server) {\n          viteDevServer = server\n        },\n        resolveId(id) {\n          if (id === opts.manifestVirtualImportId) {\n            return resolveViteId(id)\n          }\n\n          return undefined\n        },\n        load(id) {\n          if (id !== resolveViteId(opts.manifestVirtualImportId)) {\n            return undefined\n          }\n          if (this.environment.config.consumer !== 'server') {\n            return `export default {}`\n          }\n\n          const manifestWithImports = `\n          export default {${Object.entries(directiveFnsById)\n            .map(\n              ([id, fn]: any) =>\n                `'${id}': {\n                  functionName: '${fn.functionName}',\n                  importer: () => import(${JSON.stringify(fn.extractedFilename)})\n                }`,\n            )\n            .join(',')}}`\n\n          return manifestWithImports\n        },\n      },\n      // On the server, we need to compile the server functions\n      // so they can be called by other server functions.\n      // This is also where we split the server function into a separate file\n      // so we can load them on demand in the worker.\n      TanStackDirectiveFunctionsPlugin({\n        envLabel: 'Server',\n        directive,\n        directiveLabel,\n        getRuntimeCode: opts.server.getRuntimeCode,\n        replacer: opts.server.replacer,\n        onDirectiveFnsById,\n      }),\n    ],\n  }\n}\n\nexport interface TanStackServerFnPluginEnvOpts {\n  /**\n   * The virtual import ID that will be used to import the server function manifest.\n   * This virtual import ID will be used in the server build to import the manifest\n   * and its modules.\n   */\n  manifestVirtualImportId: string\n  client: {\n    envName?: string\n    getRuntimeCode: () => string\n    replacer: ReplacerFn\n  }\n  server: {\n    envName?: string\n    getRuntimeCode: () => string\n    replacer: ReplacerFn\n  }\n}\n\nexport function TanStackServerFnPluginEnv(\n  opts: TanStackServerFnPluginEnvOpts,\n): Array<Plugin> {\n  opts = {\n    ...opts,\n    client: {\n      ...opts.client,\n      envName: opts.client.envName || 'client',\n    },\n    server: {\n      ...opts.server,\n      envName: opts.server.envName || 'server',\n    },\n  }\n\n  const directiveFnsById: Record<string, DirectiveFn> = {}\n  let viteDevServer: ViteDevServer | undefined\n\n  const onDirectiveFnsById = (d: Record<string, DirectiveFn>) => {\n    // When directives are compiled, save them to our global variable\n    // This variable will be used both during development to incrementally\n    // look up server functions and during build/production to produce a\n    // static manifest that can be read by the server build\n    Object.assign(directiveFnsById, d)\n\n    invalidateVirtualModule(\n      viteDevServer,\n      resolveViteId(opts.manifestVirtualImportId),\n    )\n  }\n\n  const directive = 'use server'\n  const directiveLabel = 'Server Function'\n\n  return [\n    // The client plugin is used to compile the client directives\n    // and save them so we can create a manifest\n    TanStackDirectiveFunctionsPluginEnv({\n      directive,\n      directiveLabel,\n      onDirectiveFnsById,\n      environments: {\n        client: {\n          envLabel: 'Client',\n          getRuntimeCode: opts.client.getRuntimeCode,\n          replacer: opts.client.replacer,\n          envName: opts.client.envName,\n        },\n        server: {\n          envLabel: 'Server',\n          getRuntimeCode: opts.server.getRuntimeCode,\n          replacer: opts.server.replacer,\n          envName: opts.server.envName,\n        },\n      },\n    }),\n    {\n      // On the server, we need to be able to read the server-function manifest from the client build.\n      // This is likely used in the handler for server functions, so we can find the server function\n      // by its ID, import it, and call it. We can't do this in memory here because the builds happen in isolation,\n      // so the manifest is like a serialized state from the client build to the server build\n      name: 'tanstack-start-server-fn-vite-plugin-manifest-server',\n      enforce: 'pre',\n      configureServer(server) {\n        viteDevServer = server\n      },\n      resolveId: {\n        filter: { id: new RegExp(opts.manifestVirtualImportId) },\n        handler(id) {\n          return resolveViteId(id)\n        },\n      },\n      load: {\n        filter: { id: new RegExp(resolveViteId(opts.manifestVirtualImportId)) },\n        handler() {\n          if (this.environment.config.consumer !== 'server') {\n            return `export default {}`\n          }\n          const manifestWithImports = `\n          export default {${Object.entries(directiveFnsById)\n            .map(\n              ([id, fn]: any) =>\n                `'${id}': {\n                  functionName: '${fn.functionName}',\n                  importer: () => import(${JSON.stringify(fn.extractedFilename)})\n                }`,\n            )\n            .join(',')}}`\n\n          return manifestWithImports\n        },\n      },\n    },\n  ]\n}\n\nfunction resolveViteId(id: string) {\n  return `\\0${id}`\n}\n\nfunction invalidateVirtualModule(\n  viteDevServer: ViteDevServer | undefined,\n  resolvedId: string,\n) {\n  if (viteDevServer) {\n    const mod = viteDevServer.moduleGraph.getModuleById(resolvedId)\n    if (mod) {\n      viteDevServer.moduleGraph.invalidateModule(mod)\n    }\n  }\n}\n"],"names":["TanStackDirectiveFunctionsPlugin","id","TanStackDirectiveFunctionsPluginEnv"],"mappings":";;;AAiCO,SAAS,6BAA6B,MAI3C;AACA,QAAM,mBAAgD,CAAC;AACnD,MAAA;AAEE,QAAA,qBAAqB,CAAC,MAAmC;AAKtD,WAAA,OAAO,kBAAkB,CAAC;AACjC;AAAA,MACE;AAAA,MACA,cAAc,KAAK,uBAAuB;AAAA,IAC5C;AAAA,EACF;AAEA,QAAM,YAAY;AAClB,QAAM,iBAAiB;AAEhB,SAAA;AAAA,IACL,QAAQ;AAAA;AAAA;AAAA,MAGNA,0DAAiC;AAAA,QAC/B,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,gBAAgB,KAAK,OAAO;AAAA,QAC5B,UAAU,KAAK,OAAO;AAAA,QACtB;AAAA,MACD,CAAA;AAAA,IACH;AAAA,IACA,KAAK;AAAA;AAAA,MAEHA,0DAAiC;AAAA,QAC/B,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,gBAAgB,KAAK,IAAI;AAAA,QACzB,UAAU,KAAK,IAAI;AAAA,QACnB;AAAA,MACD,CAAA;AAAA,IACH;AAAA,IACA,QAAQ;AAAA,MACN;AAAA;AAAA;AAAA;AAAA,QAIE,MAAM;AAAA,QACN,SAAS;AAAA,QACT,gBAAgB,QAAQ;AACN,0BAAA;AAAA,QAClB;AAAA,QACA,UAAU,IAAI;AACR,cAAA,OAAO,KAAK,yBAAyB;AACvC,mBAAO,cAAc,EAAE;AAAA,UAAA;AAGlB,iBAAA;AAAA,QACT;AAAA,QACA,KAAK,IAAI;AACP,cAAI,OAAO,cAAc,KAAK,uBAAuB,GAAG;AAC/C,mBAAA;AAAA,UAAA;AAET,cAAI,KAAK,YAAY,OAAO,aAAa,UAAU;AAC1C,mBAAA;AAAA,UAAA;AAGT,gBAAM,sBAAsB;AAAA,4BACV,OAAO,QAAQ,gBAAgB,EAC9C;AAAA,YACC,CAAC,CAACC,KAAI,EAAE,MACN,IAAIA,GAAE;AAAA,mCACa,GAAG,YAAY;AAAA,2CACP,KAAK,UAAU,GAAG,iBAAiB,CAAC;AAAA;AAAA,UAAA,EAGlE,KAAK,GAAG,CAAC;AAEL,iBAAA;AAAA,QAAA;AAAA,MAEX;AAAA;AAAA;AAAA;AAAA;AAAA,MAKAD,0DAAiC;AAAA,QAC/B,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,gBAAgB,KAAK,OAAO;AAAA,QAC5B,UAAU,KAAK,OAAO;AAAA,QACtB;AAAA,MACD,CAAA;AAAA,IAAA;AAAA,EAEL;AACF;AAqBO,SAAS,0BACd,MACe;AACR,SAAA;AAAA,IACL,GAAG;AAAA,IACH,QAAQ;AAAA,MACN,GAAG,KAAK;AAAA,MACR,SAAS,KAAK,OAAO,WAAW;AAAA,IAClC;AAAA,IACA,QAAQ;AAAA,MACN,GAAG,KAAK;AAAA,MACR,SAAS,KAAK,OAAO,WAAW;AAAA,IAAA;AAAA,EAEpC;AAEA,QAAM,mBAAgD,CAAC;AACnD,MAAA;AAEE,QAAA,qBAAqB,CAAC,MAAmC;AAKtD,WAAA,OAAO,kBAAkB,CAAC;AAEjC;AAAA,MACE;AAAA,MACA,cAAc,KAAK,uBAAuB;AAAA,IAC5C;AAAA,EACF;AAEA,QAAM,YAAY;AAClB,QAAM,iBAAiB;AAEhB,SAAA;AAAA;AAAA;AAAA,IAGLE,6DAAoC;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAc;AAAA,QACZ,QAAQ;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB,KAAK,OAAO;AAAA,UAC5B,UAAU,KAAK,OAAO;AAAA,UACtB,SAAS,KAAK,OAAO;AAAA,QACvB;AAAA,QACA,QAAQ;AAAA,UACN,UAAU;AAAA,UACV,gBAAgB,KAAK,OAAO;AAAA,UAC5B,UAAU,KAAK,OAAO;AAAA,UACtB,SAAS,KAAK,OAAO;AAAA,QAAA;AAAA,MACvB;AAAA,IACF,CACD;AAAA,IACD;AAAA;AAAA;AAAA;AAAA;AAAA,MAKE,MAAM;AAAA,MACN,SAAS;AAAA,MACT,gBAAgB,QAAQ;AACN,wBAAA;AAAA,MAClB;AAAA,MACA,WAAW;AAAA,QACT,QAAQ,EAAE,IAAI,IAAI,OAAO,KAAK,uBAAuB,EAAE;AAAA,QACvD,QAAQ,IAAI;AACV,iBAAO,cAAc,EAAE;AAAA,QAAA;AAAA,MAE3B;AAAA,MACA,MAAM;AAAA,QACJ,QAAQ,EAAE,IAAI,IAAI,OAAO,cAAc,KAAK,uBAAuB,CAAC,EAAE;AAAA,QACtE,UAAU;AACR,cAAI,KAAK,YAAY,OAAO,aAAa,UAAU;AAC1C,mBAAA;AAAA,UAAA;AAET,gBAAM,sBAAsB;AAAA,4BACV,OAAO,QAAQ,gBAAgB,EAC9C;AAAA,YACC,CAAC,CAAC,IAAI,EAAE,MACN,IAAI,EAAE;AAAA,mCACa,GAAG,YAAY;AAAA,2CACP,KAAK,UAAU,GAAG,iBAAiB,CAAC;AAAA;AAAA,UAAA,EAGlE,KAAK,GAAG,CAAC;AAEL,iBAAA;AAAA,QAAA;AAAA,MACT;AAAA,IACF;AAAA,EAEJ;AACF;AAEA,SAAS,cAAc,IAAY;AACjC,SAAO,KAAK,EAAE;AAChB;AAEA,SAAS,wBACP,eACA,YACA;AACA,MAAI,eAAe;AACjB,UAAM,MAAM,cAAc,YAAY,cAAc,UAAU;AAC9D,QAAI,KAAK;AACO,oBAAA,YAAY,iBAAiB,GAAG;AAAA,IAAA;AAAA,EAChD;AAEJ;;;"}